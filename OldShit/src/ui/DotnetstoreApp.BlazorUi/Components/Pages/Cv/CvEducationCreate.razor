@page "/cv/education/add/{CvId:guid}"
@using DotnetstoreApp.CV.Educations
@using DotnetstoreApp.SDK.Requests.CV

@inject ICvEducationService CvEducationService
@inject NavigationManager NavigationManager

<PageTitle>Lägg till utbildning</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Lägg till utbildning</MudText>

@if(!string.IsNullOrEmpty(_errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="my-2">@_errorMessage</MudAlert>
}

<MudCard>
    <MudForm Model="@_model" @ref="@_form" Validation="@_validator.ValidateValue" ValidationDelay="0">
        <MudCardContent>
            <MudDatePicker @bind-Date="_model.StartDate"
                           For="@(() => _model.StartDate)"
                           data-testid="startdate_textfield"
                           Editable="true"
                           Label="Startdatum"/>
            
            <MudDatePicker @bind-Date="_model.EndDate"
                           For="@(() => _model.EndDate)"
                           data-testid="enddate_textfield"
                           Editable="true"
                           Label="Slutdatum"/>

            <MudTextField @bind-Value="_model.School"
                          For="@(() => _model.School)"
                          data-testid="school_textfield"
                          Immediate="true"
                          Label="Skola"/>

            <MudTextField @bind-Value="_model.Level"
                          For="@(() => _model.Level)"
                          data-testid="level_textfield"
                          Immediate="true"
                          Label="Nivå"/>
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" 
                   StartIcon="@Icons.Material.Filled.Save" 
                   data-testid="save_education_button"
                   Color="Color.Primary" 
                   Class="ml-auto" 
                   OnClick="@(async () => await Submit())">Save</MudButton>
        <MudButton Variant="Variant.Filled" 
                   StartIcon="@Icons.Material.Filled.Cancel" 
                   Color="Color.Error" 
                   Class="ml-auto" 
                   data-testid="cancel_information_button"
                   OnClick="@(() => Cancel())">Cancel</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public Guid CvId { get; set; }
    
    private MudForm _form = null!;
    private readonly CvEducationFluentValidator _validator = new();
    private readonly CvEducationModel _model = new();
    private string _errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        _model.CvId = CvId;
    }

    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            var request = new CvEducationCreateRequest(
                _model.CvId,
                _model.School,
                _model.Level,
                _model.StartDate!.Value,
                _model.EndDate);
            
            await CvEducationService.CreateAsync(request);

            NavigationManager.NavigateTo($"/cv/{_model.CvId}", true);
        }
        else
        {
            _errorMessage = "Formuläret innehåller ogiltiga värden. Vänligen kontrollera och försök igen.";
        }
    }
    
    private void Cancel()
    {
        NavigationManager.NavigateTo($"/cv/{_model.CvId}", true);
    }
}