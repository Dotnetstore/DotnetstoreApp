@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DotnetstoreApp.Organization.Users
@using DotnetstoreApp.SDK.Services
@using FluentValidation
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrera</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Registrera</MudText>

<MudText Typo="Typo.body1" GutterBottom="true">Registrera nytt konto här.</MudText>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@_message"/>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator/>
        
            <MudText Typo="Typo.body1" GutterBottom="true">Create a new account.</MudText>
        
            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.LastName)"
                                        @bind-Value="Input.LastName"
                                        Label="Efternamn"
                                        Placeholder="Efternamn"
                                        UserAttributes="@(new() { { "autocomplete", "lastname" }, { "aria-required", "true" } })"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.FirstName)"
                                        @bind-Value="Input.FirstName"
                                        Label="Förnamn"
                                        Placeholder="Förnamn"
                                        UserAttributes="@(new() { { "autocomplete", "firstname" }, { "aria-required", "true" } })"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.MiddleName)"
                                        @bind-Value="Input.MiddleName"
                                        Label="Mellannamn"
                                        Placeholder="Mellannamn"
                                        UserAttributes="@(new() { { "autocomplete", "middlename" }, { "aria-required", "true" } })"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.DateOfBirth)"
                                        @bind-Value="Input.DateOfBirth"
                                        Label="Födelsedatum"
                                        Placeholder="Födelsedatum"
                                        UserAttributes="@(new() { { "autocomplete", "dateofbirth" }, { "aria-required", "true" } })"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.IsMale)"
                                       @bind-Value="Input.IsMale"
                                       Label="Är man?"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Email)"
                                        @bind-Value="Input.Email"
                                        Label="Email"
                                        Placeholder="name@example.com"
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)"
                                        @bind-Value="Input.Password"
                                        Label="Password"
                                        InputType="InputType.Password"
                                        Placeholder="password"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)"
                                        @bind-Value="Input.ConfirmPassword"
                                        Label="Confirm Password"
                                        InputType="InputType.Password"
                                        Placeholder="confirm password"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled"
                                     Color="Color.Primary"
                                     FullWidth="true"
                                     FormAction="FormAction.Submit">Register</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
    <MudItem md="6">
        <MudText Typo="Typo.body1" GutterBottom="true">Use another service to register.</MudText>
        <ExternalLoginPicker/>
    </MudItem>
</MudGrid>

@code {
    private readonly RegisterApplicationUserFluentValidator _validator = new();

    [SupplyParameterFromForm] private InputModel Input { get; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? _message;

    public async Task RegisterUser(EditContext editContext)
    {
        var validateResult = await _validator.ValidateAsync(Input);

        if (!validateResult.IsValid)
        {
            _message = "Validation failed: " + string.Join(", ", validateResult.Errors.Select(e => e.ErrorMessage));
            return;
        }

        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _message = string.Join(",", result.Errors);
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        public string LastName { get; set; } = string.Empty;
    
        public string FirstName { get; set; } = string.Empty;
    
        public string? MiddleName { get; set; }

        public string DateOfBirth { get; set; } = string.Empty;

        public bool IsMale { get; set; }
        
        public string Email { get; set; } = string.Empty;

        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
    
    private sealed class RegisterApplicationUserFluentValidator : AbstractValidator<InputModel>
    {
        public RegisterApplicationUserFluentValidator()
        {
            RuleFor(x => x.LastName)
                .NotEmpty().WithMessage("Efternamn får inte vara tomt.")
                .MaximumLength(DataSchemeConstants.ApplicationUserLastNameMaxLength).WithMessage($"Efternamn får inte vara längre än {DataSchemeConstants.ApplicationUserLastNameMaxLength} tecken.");
            
            RuleFor(x => x.FirstName)
                .NotEmpty().WithMessage("Förnamn får inte vara tomt.")
                .MaximumLength(DataSchemeConstants.ApplicationUserFirstNameMaxLength).WithMessage($"Förnamn får inte vara längre än {DataSchemeConstants.ApplicationUserFirstNameMaxLength} tecken.");
            
            RuleFor(x => x.MiddleName)
                .MaximumLength(DataSchemeConstants.ApplicationUserMiddleNameMaxLength).WithMessage($"Mellannamn får inte vara längre än {DataSchemeConstants.ApplicationUserMiddleNameMaxLength} tecken.");
            
            RuleFor(x => x.DateOfBirth)
                .NotEmpty().WithMessage("Födelsedatum får inte vara tomt.")
                .Matches(@"^\d{4}-\d{2}-\d{2}$").WithMessage("Födelsedatum måste vara i formatet YYYY-MM-DD.")
                .Must(date => DateTime.TryParse(date, out _)).WithMessage("Födelsedatum är inte ett giltigt datum.");
            
            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("Email får inte vara tomt.")
                .EmailAddress().WithMessage("Email måste vara en giltig e-postadress.");
            
            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Lösenord får inte vara tomt.")
                .MinimumLength(6).WithMessage("Lösenord måste vara minst 6 tecken långt.")
                .MaximumLength(100).WithMessage("Lösenord får inte vara längre än 100 tecken.");
            
            RuleFor(x => x.ConfirmPassword)
                .NotEmpty().WithMessage("Bekräfta lösenord får inte vara tomt.")
                .Equal(x => x.Password).WithMessage("Bekräfta lösenord måste matcha lösenordet.");
        }
        
        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<InputModel>.CreateWithOptions((InputModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return [];
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}